{"name":"Utils.NET","tagline":"Collection of utilities for .NET projects","body":"# Utils.NET (UtilsDotNet)\r\n\r\nLight weight collection of utilities for .NET projects\r\n\r\n* _ArgumentParser_\r\n* _Logging_\r\n* _T4 Templates Base_\r\n* _Process helper_\r\n\r\n\r\n[![Build status](https://ci.appveyor.com/api/projects/status/d6tdpjcbwcrgd68f?svg=true)](https://ci.appveyor.com/project/nayanshah/utilsdotnet)\r\n\r\n## Argument Parser\r\n\r\n##### Parse & validate arguments or print usage with a single line\r\n\r\n* Declarative syntax\r\n - Properties can be primitive types (``string``, ``int``, ``bool``, etc) or any ``Enum`` or collections (``IEnumerable<string>``, ``IEnumerable<Enum>``, etc) \r\n - Arguments are required unless ``[Optional]`` is specified\r\n - Default values can be specified, e.g. ``[Optional(\"bot\")``, ``[Optional(\"Saturday,Sunday\")]``\r\n\r\n* Flexible parsing\r\n  - Supports nearly all variations =>  ``/arg value``, ``/arg:value``, ``/arg=value``, ``-arg value``, ``--arg value``, ``--arg=value``\r\n  - Collections can be space, semicolon or comma separated\r\n\r\n* Validation\r\n - Checks if arguments match expected types\r\n - Error if required argument is null or \r\n - Automatically print help text on ``/h``, ``/?``, ``-h``, ``--help``\r\n\r\n\r\n##### Example\r\n\r\n```csharp\r\n    [Details(\"Description of the tool\")]\r\n    public class Parameters\r\n    {\r\n        [Param(key: \"p\", longKey: \"project\")]\r\n        [Details(\"Project name. e.g. utils\")]\r\n        public string Project { get; set; }\r\n\r\n        [Param(longKey: \"mode\")]\r\n        [Details(\"Enums are automatically parsed\")]\r\n        public Mode Mode { get; set; }\r\n\r\n        [Param(key: \"u\", longKey: \"user\")]\r\n        [Details(\"User name. Optional and has default value\")]\r\n        [Optional(\"bot\")]\r\n        public string User { get; set; }\r\n\r\n        [Param(ArgumentType.ParamArray, longKey: \"run\")]\r\n        [Details(\"IEnumberable collection for ParamArray arguments\")]\r\n        [Optional]\r\n        public IEnumerable<string> Tasks { get; set; }\r\n\r\n        [Param(ArgumentType.Flag, \"v\")]\r\n        [Details(\"Boolean flags\")]\r\n        [Optional]\r\n        public bool Verbose { get; set; }\r\n    }\r\n}\r\n```\r\n\r\n```csharp\r\n    public static class Program\r\n    {\r\n        public static int Main(string[] args)\r\n        {\r\n          Parameters parameters = ArgumentParser<Parameters>.Parse();\r\n          if(parameters == null) {\r\n            ArgumentParser<Parameters>.PrintUsage();\r\n            return -1;\r\n          }\r\n          \r\n          Console.WriteLine(\"Hello from {0}\", parameters.User\");\r\n          return 0;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAutomatically generated help text\r\n\r\n```\r\nDescription of the tool\r\n\r\n  -p             --project                Project name. e.g. utils\r\n                 --mode                   Enums are automatically parsed\r\n\r\n  -h             --help                   Prints this help text (Optional)\r\n  -u             --user                   User name. Optional and has default value (Optional)\r\n                 --run                    IEnumberable collection for ParamArray arguments (Optional)\r\n  -v                                      Boolean flags (Optional)\r\n```\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}